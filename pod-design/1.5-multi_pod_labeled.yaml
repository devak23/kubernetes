# we are defining 4 pods here - red-frontend, green-backend, red-backend, blue-backend

apiVersion: v1
kind: Pod
metadata:
  name: red-frontend
  namespace: rnd    # declare namespace in metadata
  labels:           # labels mapping in metadata
    color: red
    tier: frontend
  annotations:      # Example annotation
    Lab: Kubernetes Pod Design for Application Developers
spec:
  containers:
    - image: httpd:2.4.38
      name: web-server
---
apiVersion: v1
kind: Pod
metadata:
  name: green-frontend
  namespace: rnd
  labels:
    color: green
    tier: frontend
spec:
  containers:
    - image: httpd:2.4.38
      name: web-server
---
apiVersion: v1
kind: Pod
metadata:
  name: red-backend
  namespace: rnd
  labels:
    color: red
    tier: backend
spec:
  containers:
    - image: postgres:11.2-alpine
      name: db
---
apiVersion: v1
kind: Pod
metadata:
  name: blue-backend
  namespace: rnd
  labels:
    color: blue
    tier: backend
spec:
  containers:
    - image: postgres:11.2-alpine
      name: db

###################################################################################################
# Commands to try:
# 1. kubectl get pods -L color,tier  -> the -L or --label-columns displays columns for both labels
# 2. kubectl get pods -L color,tier -l color -> selects all the pods with a color label
# 3. kubectl get pods -L color,tier -l 'color=red' -> selects all the pods with color = red
# 4. kubectl get pods -L color,tier -l 'color=red,tier!=frontend' -> self explanatory
# 5. kubectl get pods -L color,tier -l 'color in (blue,green)' -> self explanatory
# 6. kubectl get pods -L color,tier -l '!color' -> selects all pods that do not have a color label.
# 7. kubectl describe pod red-backend | grep Annotations
###################################################################################################